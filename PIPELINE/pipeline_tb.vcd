$date
	Thu Nov 30 17:15:25 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pipeline_tb $end
$var reg 1 ! clk $end
$var reg 32 " initial_address [31:0] $end
$var reg 1 # reset $end
$var reg 1 $ tr $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 32 % initial_address [31:0] $end
$var wire 1 # reset $end
$var wire 1 $ tr $end
$var wire 1 & RU_WRITE_WB $end
$var wire 1 ' RU_WRITE_ME $end
$var wire 1 ( RU_WRITE_EX $end
$var wire 1 ) RU_WRITE $end
$var wire 2 * RU_DATA_SRC_WB [1:0] $end
$var wire 2 + RU_DATA_SRC_ME [1:0] $end
$var wire 2 , RU_DATA_SRC_EX [1:0] $end
$var wire 2 - RU_DATA_SRC [1:0] $end
$var wire 5 . RS2 [4:0] $end
$var wire 5 / RS1 [4:0] $end
$var wire 32 0 RESULT_ALU_WB [31:0] $end
$var wire 32 1 RESULT_ALU_ME [31:0] $end
$var wire 32 2 RESULT_ALU [31:0] $end
$var wire 32 3 REGISTER_DATA_2_ME [31:0] $end
$var wire 32 4 REGISTER_DATA_2_EX [31:0] $end
$var wire 32 5 REGISTER_DATA_2 [31:0] $end
$var wire 32 6 REGISTER_DATA_1_EX [31:0] $end
$var wire 32 7 REGISTER_DATA_1 [31:0] $end
$var wire 5 8 RD_WB [4:0] $end
$var wire 5 9 RD_ME [4:0] $end
$var wire 5 : RD_EX [4:0] $end
$var wire 5 ; RD [4:0] $end
$var wire 32 < PC_PLUS_4_WB [31:0] $end
$var wire 32 = PC_PLUS_4_ME [31:0] $end
$var wire 32 > PC_PLUS_4_EX [31:0] $end
$var wire 32 ? PC_PLUS_4_DE [31:0] $end
$var wire 32 @ PC_PLUS_4 [31:0] $end
$var wire 7 A OPCODE [6:0] $end
$var wire 1 B NEXT_PC_SRC $end
$var wire 32 C NEXT_ADDRESS_PC [31:0] $end
$var wire 32 D INSTRUCTION_DE [31:0] $end
$var wire 32 E INSTRUCTION [31:0] $end
$var wire 3 F IMM_SRC [2:0] $end
$var wire 32 G IMM_EXT_EX [31:0] $end
$var wire 32 H IMM_EXT [31:0] $end
$var wire 25 I IMM_DATA [24:0] $end
$var wire 7 J FUNCT7 [6:0] $end
$var wire 3 K FUNCT3 [2:0] $end
$var wire 1 L DM_WRITE_ME $end
$var wire 1 M DM_WRITE_EX $end
$var wire 1 N DM_WRITE $end
$var wire 3 O DM_CTRL_ME [2:0] $end
$var wire 3 P DM_CTRL_EX [2:0] $end
$var wire 3 Q DM_CTRL [2:0] $end
$var wire 32 R DATA_WRITE_REGISTER [31:0] $end
$var wire 32 S DATA_MEMORY_READ_WB [31:0] $end
$var wire 32 T DATA_MEMORY_READ [31:0] $end
$var wire 32 U B_DATA_ALU [31:0] $end
$var wire 5 V BR_OP_EX [4:0] $end
$var wire 5 W BR_OP [4:0] $end
$var wire 32 X A_DATA_ALU [31:0] $end
$var wire 4 Y ALU_OP_EX [3:0] $end
$var wire 4 Z ALU_OP [3:0] $end
$var wire 1 [ ALU_B_SRC_EX $end
$var wire 1 \ ALU_B_SRC $end
$var wire 2 ] ALU_A_SRC_EX [1:0] $end
$var wire 2 ^ ALU_A_SRC [1:0] $end
$var wire 32 _ ADDRESS_PC_EX [31:0] $end
$var wire 32 ` ADDRESS_PC_DE [31:0] $end
$var wire 32 a ADDRESS_PC [31:0] $end
$var reg 32 b ZERO_ALU_A_SRC [31:0] $end
$scope module alu $end
$var wire 32 c and_result [31:0] $end
$var wire 3 d func3 [2:0] $end
$var wire 32 e or_result [31:0] $end
$var wire 1 f subsra $end
$var wire 32 g xor_result [31:0] $end
$var wire 32 h sum_result [31:0] $end
$var wire 32 i shra_result [31:0] $end
$var wire 32 j shr_result [31:0] $end
$var wire 32 k shl_result [31:0] $end
$var wire 32 l operand2 [31:0] $end
$var wire 32 m operand1 [31:0] $end
$var wire 32 n lt_result [31:0] $end
$var wire 32 o diff_result [31:0] $end
$var reg 32 p result [31:0] $end
$upscope $end
$scope module branch_unit $end
$var wire 32 q rs2 [31:0] $end
$var wire 32 r rs1 [31:0] $end
$var wire 5 s br_op [4:0] $end
$var reg 1 B jump $end
$upscope $end
$scope module control_unit $end
$var wire 7 t opcode [6:0] $end
$var wire 7 u funct7 [6:0] $end
$var wire 3 v funct3 [2:0] $end
$var reg 2 w alu_a_src [1:0] $end
$var reg 1 \ alu_b_src $end
$var reg 4 x alu_op [3:0] $end
$var reg 5 y br_op [4:0] $end
$var reg 3 z dm_ctrl [2:0] $end
$var reg 1 N dm_write $end
$var reg 3 { imm_src [2:0] $end
$var reg 2 | ru_data_src [1:0] $end
$var reg 1 ) ru_write $end
$upscope $end
$scope module data_memory $end
$var wire 1 L dmwr $end
$var wire 3 } dmctrl [2:0] $end
$var wire 32 ~ datawr [31:0] $end
$var wire 32 !" address [31:0] $end
$var reg 32 "" datard [31:0] $end
$upscope $end
$scope module de_ex $end
$var wire 2 #" alu_a_srcIn [1:0] $end
$var wire 1 \ alu_b_srcIn $end
$var wire 4 $" alu_opIn [3:0] $end
$var wire 5 %" br_opIn [4:0] $end
$var wire 1 ! clk $end
$var wire 3 &" dm_ctrlIn [2:0] $end
$var wire 1 N dm_writeIn $end
$var wire 2 '" ru_data_srcIn [1:0] $end
$var wire 1 ) ru_writeIn $end
$var wire 5 (" rdIn [4:0] $end
$var wire 32 )" incrementPCIn [31:0] $end
$var wire 32 *" immExtIn [31:0] $end
$var wire 32 +" RS2In [31:0] $end
$var wire 32 ," RS1In [31:0] $end
$var wire 32 -" PCIn [31:0] $end
$var reg 32 ." PCOut [31:0] $end
$var reg 32 /" RS1Out [31:0] $end
$var reg 32 0" RS2Out [31:0] $end
$var reg 2 1" alu_a_srcOut [1:0] $end
$var reg 1 [ alu_b_srcOut $end
$var reg 4 2" alu_opOut [3:0] $end
$var reg 5 3" br_opOut [4:0] $end
$var reg 3 4" dm_ctrlOut [2:0] $end
$var reg 1 M dm_writeOut $end
$var reg 32 5" immExtOut [31:0] $end
$var reg 32 6" incrementPCOut [31:0] $end
$var reg 5 7" rdOut [4:0] $end
$var reg 2 8" ru_data_srcOut [1:0] $end
$var reg 1 ( ru_writeOut $end
$upscope $end
$scope module decoder $end
$var wire 32 9" instruction [31:0] $end
$var reg 3 :" funct3 [2:0] $end
$var reg 7 ;" funct7 [6:0] $end
$var reg 25 <" immdata [24:0] $end
$var reg 7 =" opcode [6:0] $end
$var reg 5 >" rd [4:0] $end
$var reg 5 ?" rs1 [4:0] $end
$var reg 5 @" rs2 [4:0] $end
$upscope $end
$scope module ex_me $end
$var wire 32 A" ALUResIn [31:0] $end
$var wire 1 ! clk $end
$var wire 3 B" dm_ctrlIn [2:0] $end
$var wire 1 N dm_writeIn $end
$var wire 32 C" incrementPCIn [31:0] $end
$var wire 5 D" rdIn [4:0] $end
$var wire 2 E" ru_data_srcIn [1:0] $end
$var wire 1 ( ru_writeIn $end
$var wire 32 F" RS2In [31:0] $end
$var reg 32 G" ALUResOut [31:0] $end
$var reg 32 H" RS2Out [31:0] $end
$var reg 3 I" dm_ctrlOut [2:0] $end
$var reg 1 L dm_writeOut $end
$var reg 32 J" incrementPCOut [31:0] $end
$var reg 5 K" rdOut [4:0] $end
$var reg 2 L" ru_data_srcOut [1:0] $end
$var reg 1 ' ru_writeOut $end
$upscope $end
$scope module if_de $end
$var wire 1 ! clk $end
$var wire 32 M" instructionIn [31:0] $end
$var wire 32 N" incrementPCIn [31:0] $end
$var wire 32 O" PCIn [31:0] $end
$var reg 32 P" PCOut [31:0] $end
$var reg 32 Q" incrementPCOut [31:0] $end
$var reg 32 R" instructionOut [31:0] $end
$upscope $end
$scope module imm_unit $end
$var wire 25 S" imm [24:0] $end
$var wire 3 T" immsrc [2:0] $end
$var reg 32 U" immext [31:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 V" address [31:0] $end
$var parameter 32 W" size_address $end
$var parameter 32 X" size_memory $end
$var reg 32 Y" instruction [31:0] $end
$upscope $end
$scope module me_wb $end
$var wire 32 Z" ALUResIn [31:0] $end
$var wire 32 [" DMDataRdIn [31:0] $end
$var wire 1 ! clk $end
$var wire 32 \" incrementPCIn [31:0] $end
$var wire 5 ]" rdIn [4:0] $end
$var wire 2 ^" ru_data_srcIn [1:0] $end
$var wire 1 ' ru_writeIn $end
$var reg 32 _" ALUResOut [31:0] $end
$var reg 32 `" DMDataRdOut [31:0] $end
$var reg 32 a" incrementPCOut [31:0] $end
$var reg 5 b" rdOut [4:0] $end
$var reg 2 c" ru_data_srcOut [1:0] $end
$var reg 1 & ru_writeOut $end
$upscope $end
$scope module mux2to1_B $end
$var wire 32 d" input_1 [31:0] $end
$var wire 32 e" input_2 [31:0] $end
$var wire 1 [ select $end
$var reg 32 f" output_32 [31:0] $end
$upscope $end
$scope module mux2to1_PC $end
$var wire 32 g" input_2 [31:0] $end
$var wire 1 B select $end
$var wire 32 h" input_1 [31:0] $end
$var reg 32 i" output_32 [31:0] $end
$upscope $end
$scope module mux3to1 $end
$var wire 32 j" input_1 [31:0] $end
$var wire 32 k" input_2 [31:0] $end
$var wire 32 l" input_3 [31:0] $end
$var wire 2 m" select [1:0] $end
$var reg 32 n" output_32 [31:0] $end
$upscope $end
$scope module mux3to1_A $end
$var wire 32 o" input_1 [31:0] $end
$var wire 32 p" input_2 [31:0] $end
$var wire 32 q" input_3 [31:0] $end
$var wire 2 r" select [1:0] $end
$var reg 32 s" output_32 [31:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 ! clk $end
$var wire 32 t" initial_address [31:0] $end
$var wire 32 u" next_address [31:0] $end
$var wire 1 # reset $end
$var reg 32 v" address [31:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 ! clk $end
$var wire 32 w" data [31:0] $end
$var wire 5 x" rd [4:0] $end
$var wire 5 y" rs1 [4:0] $end
$var wire 32 z" rs1Data [31:0] $end
$var wire 5 {" rs2 [4:0] $end
$var wire 32 |" rs2Data [31:0] $end
$var wire 1 $ tr $end
$var wire 1 & writeEnable $end
$scope begin $ivl_for_loop0 $end
$var integer 32 }" i [31:0] $end
$upscope $end
$upscope $end
$scope module sum4 $end
$var wire 32 ~" input_1 [31:0] $end
$var reg 32 !# output_32 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000000000 X"
b100000 W"
$end
#0
$dumpvars
bx !#
bx ~"
b0 }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
b0 t"
bx s"
bx r"
b0 q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b0x n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
xf
bx e
bx d
bx c
b0 b
bx a
bx `
bx _
bx ^
bx ]
x\
x[
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
xN
xM
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
0B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
x'
x&
b0 %
x$
1#
b0 "
0!
$end
#5
b100 C
b100 i"
b100 u"
b10000000000000010010011 E
b10000000000000010010011 M"
b10000000000000010010011 Y"
b100 @
b100 N"
b100 h"
b100 !#
b0 a
b0 O"
b0 V"
b0 v"
b0 ~"
1!
#10
b100 H
b100 *"
b100 U"
b0 -
b0 |
b0 '"
b0 E"
b0xxx W
b0xxx y
b0xxx %"
0N
1\
b0 ^
b0 w
b0 #"
b0 F
b0 {
b0 T"
b0 Z
b0 x
b0 $"
1)
b1000000000000001 I
b1000000000000001 <"
b1000000000000001 S"
b1 ;
b1 ("
b1 >"
b1 D"
b100 .
b100 @"
b100 {"
b0 7
b0 ,"
b0 z"
b0 /
b0 ?"
b0 y"
b0 J
b0 u
b0 ;"
b0 K
b0 v
b0 :"
b10011 A
b10011 t
b10011 ="
b100 ?
b100 )"
b100 Q"
b10000000000000010010011 D
b10000000000000010010011 9"
b10000000000000010010011 R"
b0 `
b0 -"
b0 P"
0!
0#
#15
b1000 C
b1000 i"
b1000 u"
b100 g
b100 e
b0 c
b100 2
b100 p
b100 A"
b100 g"
b10100000000000110010011 E
b10100000000000110010011 M"
b10100000000000110010011 Y"
b1000 @
b1000 N"
b1000 h"
b1000 !#
0f
b0 d
b0 i
b0 j
b0 k
b1 n
b11111111111111111111111111111100 o
b100 h
b100 U
b100 l
b100 f"
b0 X
b0 m
b0 s"
b100 a
b100 O"
b100 V"
b100 v"
b100 ~"
1(
b0 ,
b0 8"
b0xxx V
b0xxx s
b0xxx 3"
0M
1[
b0 ]
b0 1"
b0 r"
b0 Y
b0 2"
b1 :
b1 7"
b100 G
b100 5"
b100 e"
b0 6
b0 r
b0 /"
b0 o"
b0 _
b0 ."
b0 p"
b100 >
b100 6"
b100 C"
1!
#20
b101 H
b101 *"
b101 U"
b1010000000000011 I
b1010000000000011 <"
b1010000000000011 S"
b11 ;
b11 ("
b11 >"
b11 D"
b101 .
b101 @"
b101 {"
b0 T
b0 ""
b0 ["
b1000 ?
b1000 )"
b1000 Q"
b10100000000000110010011 D
b10100000000000110010011 9"
b10100000000000110010011 R"
b100 `
b100 -"
b100 P"
1'
b0 +
b0 L"
b0 ^"
0L
b1 9
b1 K"
b1 ]"
b100 1
b100 !"
b100 G"
b100 Z"
b100 =
b100 J"
b100 \"
0!
#25
b101 g
b101 e
b101 2
b101 p
b101 A"
b101 g"
b1100 C
b1100 i"
b1100 u"
b11111111111111111111111111111011 o
b101 h
b101 U
b101 l
b101 f"
b100 R
b100 n"
b100 w"
b100001010000000100011 E
b100001010000000100011 M"
b100001010000000100011 Y"
b1100 @
b1100 N"
b1100 h"
b1100 !#
b11 :
b11 7"
b101 G
b101 5"
b101 e"
b100 _
b100 ."
b100 p"
b1000 >
b1000 6"
b1000 C"
1&
b0 *
b0 c"
b0 m"
b1 8
b1 b"
b1 x"
b0 S
b0 `"
b0 k"
b100 0
b100 _"
b100 j"
b100 <
b100 a"
b100 l"
b1000 a
b1000 O"
b1000 V"
b1000 v"
b1000 ~"
1!
#30
b100 5
b100 +"
b100 F"
b100 |"
b0 H
b0 *"
b0 U"
bx -
bx |
bx '"
bx E"
b10 Q
b10 z
b10 &"
b10 B"
1N
b1 F
b1 {
b1 T"
0)
b10000101000000 I
b10000101000000 <"
b10000101000000 S"
b0 ;
b0 ("
b0 >"
b0 D"
b1 .
b1 @"
b1 {"
b100 7
b100 ,"
b100 z"
b1 /
b1 ?"
b1 y"
b10 K
b10 v
b10 :"
b100011 A
b100011 t
b100011 ="
b11 9
b11 K"
b11 ]"
b101 1
b101 !"
b101 G"
b101 Z"
b1000 =
b1000 J"
b1000 \"
b1100 ?
b1100 )"
b1100 Q"
b100001010000000100011 D
b100001010000000100011 9"
b100001010000000100011 R"
b1000 `
b1000 -"
b1000 P"
0!
#35
b10000 C
b10000 i"
b10000 u"
b100 g
b100 e
b100 2
b100 p
b100 A"
b100 g"
b1010001000000011 E
b1010001000000011 M"
b1010001000000011 Y"
b10000 @
b10000 N"
b10000 h"
b10000 !#
b101 R
b101 n"
b101 w"
b100 i
b100 j
b0 n
b0 U
b0 l
b0 f"
b100 k
b100 o
b100 h
b100 X
b100 m
b100 s"
b1100 a
b1100 O"
b1100 V"
b1100 v"
b1100 ~"
b11 8
b11 b"
b11 x"
b101 0
b101 _"
b101 j"
b1000 <
b1000 a"
b1000 l"
0(
bx ,
bx 8"
b10 P
b10 4"
1M
b0 :
b0 7"
b0 G
b0 5"
b0 e"
b100 4
b100 q
b100 0"
b100 d"
b100 6
b100 r
b100 /"
b100 o"
b1000 _
b1000 ."
b1000 p"
b1100 >
b1100 6"
b1100 C"
1!
#40
b1 -
b1 |
b1 '"
b1 E"
0N
b0 F
b0 {
b0 T"
1)
b101000100 I
b101000100 <"
b101000100 S"
b100 ;
b100 ("
b100 >"
b100 D"
b0 5
b0 +"
b0 F"
b0 |"
b0 .
b0 @"
b0 {"
b11 A
b11 t
b11 ="
b10000 ?
b10000 )"
b10000 Q"
b1010001000000011 D
b1010001000000011 9"
b1010001000000011 R"
b1100 `
b1100 -"
b1100 P"
0'
bx +
bx L"
bx ^"
b10 O
b10 }
b10 I"
1L
b0 9
b0 K"
b0 ]"
b100 3
b100 ~
b100 H"
b100 1
b100 !"
b100 G"
b100 Z"
b1100 =
b1100 J"
b1100 \"
0!
#45
b10100 C
b10100 i"
b10100 u"
b1100001010000000100011 E
b1100001010000000100011 M"
b1100001010000000100011 Y"
b10100 @
b10100 N"
b10100 h"
b10100 !#
1(
b1 ,
b1 8"
0M
b100 :
b100 7"
b0 4
b0 q
b0 0"
b0 d"
b1100 _
b1100 ."
b1100 p"
b10000 >
b10000 6"
b10000 C"
0&
bx *
bx c"
bx m"
b0 8
b0 b"
b0 x"
b100 0
b100 _"
b100 j"
b1100 <
b1100 a"
b1100 l"
b10000 a
b10000 O"
b10000 V"
b10000 v"
b10000 ~"
1!
#50
bx -
bx |
bx '"
bx E"
1N
b1 F
b1 {
b1 T"
0)
b100 T
b100 ""
b100 ["
b110000101000000 I
b110000101000000 <"
b110000101000000 S"
b0 ;
b0 ("
b0 >"
b0 D"
b101 5
b101 +"
b101 F"
b101 |"
b11 .
b11 @"
b11 {"
b100011 A
b100011 t
b100011 ="
1'
b1 +
b1 L"
b1 ^"
0L
b100 9
b100 K"
b100 ]"
b0 3
b0 ~
b0 H"
b10000 =
b10000 J"
b10000 \"
b10100 ?
b10100 )"
b10100 Q"
b1100001010000000100011 D
b1100001010000000100011 9"
b1100001010000000100011 R"
b10000 `
b10000 -"
b10000 P"
0!
#55
b11000 C
b11000 i"
b11000 u"
b1010001010000011 E
b1010001010000011 M"
b1010001010000011 Y"
b11000 @
b11000 N"
b11000 h"
b11000 !#
b100 R
b100 n"
b100 w"
b10100 a
b10100 O"
b10100 V"
b10100 v"
b10100 ~"
1&
b1 *
b1 c"
b1 m"
b100 8
b100 b"
b100 x"
b100 S
b100 `"
b100 k"
b10000 <
b10000 a"
b10000 l"
0(
bx ,
bx 8"
1M
b0 :
b0 7"
b101 4
b101 q
b101 0"
b101 d"
b10000 _
b10000 ."
b10000 p"
b10100 >
b10100 6"
b10100 C"
1!
#60
b1 -
b1 |
b1 '"
b1 E"
0N
b0 F
b0 {
b0 T"
1)
b101000101 I
b101000101 <"
b101000101 S"
b101 ;
b101 ("
b101 >"
b101 D"
b0 5
b0 +"
b0 F"
b0 |"
b0 .
b0 @"
b0 {"
b11 A
b11 t
b11 ="
b11000 ?
b11000 )"
b11000 Q"
b1010001010000011 D
b1010001010000011 9"
b1010001010000011 R"
b10100 `
b10100 -"
b10100 P"
0'
bx +
bx L"
bx ^"
1L
b0 9
b0 K"
b0 ]"
b101 3
b101 ~
b101 H"
b10100 =
b10100 J"
b10100 \"
0!
#65
b11100 C
b11100 i"
b11100 u"
bx E
bx M"
bx Y"
b11100 @
b11100 N"
b11100 h"
b11100 !#
1(
b1 ,
b1 8"
0M
b101 :
b101 7"
b0 4
b0 q
b0 0"
b0 d"
b10100 _
b10100 ."
b10100 p"
b11000 >
b11000 6"
b11000 C"
0&
bx *
bx c"
bx m"
b0 8
b0 b"
b0 x"
b10100 <
b10100 a"
b10100 l"
b11000 a
b11000 O"
b11000 V"
b11000 v"
b11000 ~"
1!
#70
bx H
bx *"
bx U"
b101 T
b101 ""
b101 ["
bx I
bx <"
bx S"
bx ;
bx ("
bx >"
bx D"
bx 5
bx +"
bx F"
bx |"
bx .
bx @"
bx {"
bx 7
bx ,"
bx z"
bx /
bx ?"
bx y"
bx J
bx u
bx ;"
bx K
bx v
bx :"
bx A
bx t
bx ="
1'
b1 +
b1 L"
b1 ^"
0L
b101 9
b101 K"
b101 ]"
b0 3
b0 ~
b0 H"
b11000 =
b11000 J"
b11000 \"
b11100 ?
b11100 )"
b11100 Q"
bx D
bx 9"
bx R"
b11000 `
b11000 -"
b11000 P"
0!
#75
b100000 C
b100000 i"
b100000 u"
bx g
bx e
bx c
bx 2
bx p
bx A"
bx g"
b100000 @
b100000 N"
b100000 h"
b100000 !#
b101 R
b101 n"
b101 w"
bx U
bx l
bx f"
bx i
bx j
bx k
b0x n
bx o
bx h
bx X
bx m
bx s"
b11100 a
b11100 O"
b11100 V"
b11100 v"
b11100 ~"
1&
b1 *
b1 c"
b1 m"
b101 8
b101 b"
b101 x"
b101 S
b101 `"
b101 k"
b11000 <
b11000 a"
b11000 l"
bx :
bx 7"
bx G
bx 5"
bx e"
bx 4
bx q
bx 0"
bx d"
bx 6
bx r
bx /"
bx o"
b11000 _
b11000 ."
b11000 p"
b11100 >
b11100 6"
b11100 C"
1!
#80
bx T
bx ""
bx ["
b100000 ?
b100000 )"
b100000 Q"
b11100 `
b11100 -"
b11100 P"
bx 9
bx K"
bx ]"
bx 3
bx ~
bx H"
bx 1
bx !"
bx G"
bx Z"
b11100 =
b11100 J"
b11100 \"
0!
#85
b100100 C
b100100 i"
b100100 u"
bx R
bx n"
bx w"
b100100 @
b100100 N"
b100100 h"
b100100 !#
b11100 _
b11100 ."
b11100 p"
b100000 >
b100000 6"
b100000 C"
bx 8
bx b"
bx x"
bx S
bx `"
bx k"
bx 0
bx _"
bx j"
b11100 <
b11100 a"
b11100 l"
b100000 a
b100000 O"
b100000 V"
b100000 v"
b100000 ~"
1!
#90
b100000 =
b100000 J"
b100000 \"
b100100 ?
b100100 )"
b100100 Q"
b100000 `
b100000 -"
b100000 P"
0!
#95
b101000 C
b101000 i"
b101000 u"
b101000 @
b101000 N"
b101000 h"
b101000 !#
b100100 a
b100100 O"
b100100 V"
b100100 v"
b100100 ~"
b100000 <
b100000 a"
b100000 l"
b100000 _
b100000 ."
b100000 p"
b100100 >
b100100 6"
b100100 C"
1!
#100
b101000 ?
b101000 )"
b101000 Q"
b100100 `
b100100 -"
b100100 P"
b100100 =
b100100 J"
b100100 \"
0!
#105
b101100 C
b101100 i"
b101100 u"
b101100 @
b101100 N"
b101100 h"
b101100 !#
b100100 _
b100100 ."
b100100 p"
b101000 >
b101000 6"
b101000 C"
b100100 <
b100100 a"
b100100 l"
b101000 a
b101000 O"
b101000 V"
b101000 v"
b101000 ~"
1!
#110
b101000 =
b101000 J"
b101000 \"
b101100 ?
b101100 )"
b101100 Q"
b101000 `
b101000 -"
b101000 P"
0!
#115
b110000 C
b110000 i"
b110000 u"
b110000 @
b110000 N"
b110000 h"
b110000 !#
b101100 a
b101100 O"
b101100 V"
b101100 v"
b101100 ~"
b101000 <
b101000 a"
b101000 l"
b101000 _
b101000 ."
b101000 p"
b101100 >
b101100 6"
b101100 C"
1!
#120
b110000 ?
b110000 )"
b110000 Q"
b101100 `
b101100 -"
b101100 P"
b101100 =
b101100 J"
b101100 \"
0!
#125
b110100 C
b110100 i"
b110100 u"
b110100 @
b110100 N"
b110100 h"
b110100 !#
b101100 _
b101100 ."
b101100 p"
b110000 >
b110000 6"
b110000 C"
b101100 <
b101100 a"
b101100 l"
b110000 a
b110000 O"
b110000 V"
b110000 v"
b110000 ~"
1!
#130
b110000 =
b110000 J"
b110000 \"
b110100 ?
b110100 )"
b110100 Q"
b110000 `
b110000 -"
b110000 P"
0!
#135
b111000 C
b111000 i"
b111000 u"
b111000 @
b111000 N"
b111000 h"
b111000 !#
b110100 a
b110100 O"
b110100 V"
b110100 v"
b110100 ~"
b110000 <
b110000 a"
b110000 l"
b110000 _
b110000 ."
b110000 p"
b110100 >
b110100 6"
b110100 C"
1!
#140
b111000 ?
b111000 )"
b111000 Q"
b110100 `
b110100 -"
b110100 P"
b110100 =
b110100 J"
b110100 \"
0!
#145
b111100 C
b111100 i"
b111100 u"
b111100 @
b111100 N"
b111100 h"
b111100 !#
b110100 _
b110100 ."
b110100 p"
b111000 >
b111000 6"
b111000 C"
b110100 <
b110100 a"
b110100 l"
b111000 a
b111000 O"
b111000 V"
b111000 v"
b111000 ~"
1!
#150
b111000 =
b111000 J"
b111000 \"
b111100 ?
b111100 )"
b111100 Q"
b111000 `
b111000 -"
b111000 P"
0!
1$
#155
b1000000 C
b1000000 i"
b1000000 u"
b1000000 @
b1000000 N"
b1000000 h"
b1000000 !#
b100000 }"
b111100 a
b111100 O"
b111100 V"
b111100 v"
b111100 ~"
b111000 <
b111000 a"
b111000 l"
b111000 _
b111000 ."
b111000 p"
b111100 >
b111100 6"
b111100 C"
1!
#156
