$date
	Fri Nov 24 16:31:57 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module monocycle_tb $end
$var reg 1 ! clk $end
$var reg 32 " initial_address [31:0] $end
$var reg 1 # reset $end
$var reg 1 $ tr $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 32 % initial_address [31:0] $end
$var wire 1 # reset $end
$var wire 1 $ tr $end
$var wire 1 & RU_WRITE $end
$var wire 2 ' RU_DATA_SRC [1:0] $end
$var wire 5 ( RS2 [4:0] $end
$var wire 5 ) RS1 [4:0] $end
$var wire 32 * RESULT_ALU [31:0] $end
$var wire 32 + REGISTER_DATA_2 [31:0] $end
$var wire 32 , REGISTER_DATA_1 [31:0] $end
$var wire 5 - RD [4:0] $end
$var wire 32 . PC_PLUS_4 [31:0] $end
$var wire 7 / OPCODE [6:0] $end
$var wire 1 0 NEXT_PC_SRC $end
$var wire 32 1 NEXT_ADDRESS_PC [31:0] $end
$var wire 32 2 INSTRUCTION [31:0] $end
$var wire 3 3 IMM_SRC [2:0] $end
$var wire 32 4 IMM_EXT [31:0] $end
$var wire 25 5 IMM_DATA [24:0] $end
$var wire 7 6 FUNCT7 [6:0] $end
$var wire 3 7 FUNCT3 [2:0] $end
$var wire 1 8 DM_WRITE $end
$var wire 3 9 DM_CTRL [2:0] $end
$var wire 32 : DATA_WRITE_REGISTER [31:0] $end
$var wire 32 ; DATA_MEMORY_READ [31:0] $end
$var wire 32 < B_DATA_ALU [31:0] $end
$var wire 5 = BR_OP [4:0] $end
$var wire 32 > A_DATA_ALU [31:0] $end
$var wire 4 ? ALU_OP [3:0] $end
$var wire 1 @ ALU_B_SRC $end
$var wire 2 A ALU_A_SRC [1:0] $end
$var wire 32 B ADDRESS_PC [31:0] $end
$var reg 32 C ZERO_ALU_A_SRC [31:0] $end
$scope module alu $end
$var wire 32 D and_result [31:0] $end
$var wire 3 E func3 [2:0] $end
$var wire 32 F or_result [31:0] $end
$var wire 1 G subsra $end
$var wire 32 H xor_result [31:0] $end
$var wire 32 I sum_result [31:0] $end
$var wire 32 J shra_result [31:0] $end
$var wire 32 K shr_result [31:0] $end
$var wire 32 L shl_result [31:0] $end
$var wire 32 M operand2 [31:0] $end
$var wire 32 N operand1 [31:0] $end
$var wire 32 O lt_result [31:0] $end
$var wire 32 P diff_result [31:0] $end
$var reg 32 Q result [31:0] $end
$upscope $end
$scope module branch_unit $end
$var wire 32 R rs2 [31:0] $end
$var wire 32 S rs1 [31:0] $end
$var wire 5 T br_op [4:0] $end
$var reg 1 0 jump $end
$upscope $end
$scope module control_unit $end
$var wire 7 U opcode [6:0] $end
$var wire 7 V funct7 [6:0] $end
$var wire 3 W funct3 [2:0] $end
$var reg 2 X alu_a_src [1:0] $end
$var reg 1 @ alu_b_src $end
$var reg 4 Y alu_op [3:0] $end
$var reg 5 Z br_op [4:0] $end
$var reg 3 [ dm_ctrl [2:0] $end
$var reg 1 8 dm_write $end
$var reg 3 \ imm_src [2:0] $end
$var reg 2 ] ru_data_src [1:0] $end
$var reg 1 & ru_write $end
$upscope $end
$scope module data_memory $end
$var wire 32 ^ address [31:0] $end
$var wire 3 _ dmctrl [2:0] $end
$var wire 1 8 dmwr $end
$var wire 32 ` datawr [31:0] $end
$var reg 32 a datard [31:0] $end
$upscope $end
$scope module decoder $end
$var wire 32 b instruction [31:0] $end
$var reg 3 c funct3 [2:0] $end
$var reg 7 d funct7 [6:0] $end
$var reg 25 e immdata [24:0] $end
$var reg 7 f opcode [6:0] $end
$var reg 5 g rd [4:0] $end
$var reg 5 h rs1 [4:0] $end
$var reg 5 i rs2 [4:0] $end
$upscope $end
$scope module imm_unit $end
$var wire 25 j imm [24:0] $end
$var wire 3 k immsrc [2:0] $end
$var reg 32 l immext [31:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 m address [31:0] $end
$var parameter 32 n size_address $end
$var parameter 32 o size_memory $end
$var reg 32 p instruction [31:0] $end
$upscope $end
$scope module mux2to1_B $end
$var wire 32 q input_2 [31:0] $end
$var wire 1 @ select $end
$var wire 32 r input_1 [31:0] $end
$var reg 32 s output_32 [31:0] $end
$upscope $end
$scope module mux2to1_PC $end
$var wire 32 t input_2 [31:0] $end
$var wire 1 0 select $end
$var wire 32 u input_1 [31:0] $end
$var reg 32 v output_32 [31:0] $end
$upscope $end
$scope module mux3to1 $end
$var wire 32 w input_1 [31:0] $end
$var wire 32 x input_2 [31:0] $end
$var wire 2 y select [1:0] $end
$var wire 32 z input_3 [31:0] $end
$var reg 32 { output_32 [31:0] $end
$upscope $end
$scope module mux3to1_A $end
$var wire 32 | input_3 [31:0] $end
$var wire 2 } select [1:0] $end
$var wire 32 ~ input_2 [31:0] $end
$var wire 32 !" input_1 [31:0] $end
$var reg 32 "" output_32 [31:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 ! clk $end
$var wire 32 #" initial_address [31:0] $end
$var wire 32 $" next_address [31:0] $end
$var wire 1 # reset $end
$var reg 32 %" address [31:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 ! clk $end
$var wire 32 &" data [31:0] $end
$var wire 5 '" rd [4:0] $end
$var wire 5 (" rs1 [4:0] $end
$var wire 32 )" rs1Data [31:0] $end
$var wire 5 *" rs2 [4:0] $end
$var wire 32 +" rs2Data [31:0] $end
$var wire 1 $ tr $end
$var wire 1 & writeEnable $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ," i [31:0] $end
$upscope $end
$upscope $end
$scope module sum4 $end
$var wire 32 -" input_1 [31:0] $end
$var reg 32 ." output_32 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000000000 o
b100000 n
$end
#0
$dumpvars
bx ."
bx -"
b0 ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
b0 #"
bx ""
bx !"
bx ~
bx }
b0 |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
b0x O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
xG
bx F
bx E
bx D
b0 C
bx B
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
00
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
b0 %
x$
1#
b0 "
0!
$end
#5
b1 :
b1 {
b1 &"
b1 H
b1 F
b0 D
b1 *
b1 Q
b1 ^
b1 t
b1 w
b0 ;
b0 a
b0 x
b0 J
b0 K
b0 L
b1 O
b11111111111111111111111111111111 P
b1 I
b1 <
b1 M
b1 s
0G
b0 E
b1 4
b1 l
b1 q
b0 >
b0 N
b0 ""
b0 '
b0 ]
b0 y
b0xxx =
b0xxx T
b0xxx Z
08
1@
b0 A
b0 X
b0 }
b0 3
b0 \
b0 k
b0 ?
b0 Y
1&
b10000000000001 5
b10000000000001 e
b10000000000001 j
b1 -
b1 g
b1 '"
b1 (
b1 i
b1 *"
b0 ,
b0 S
b0 !"
b0 )"
b0 )
b0 h
b0 ("
b0 6
b0 V
b0 d
b0 7
b0 W
b0 c
b10011 /
b10011 U
b10011 f
b100 1
b100 v
b100 $"
b100000000000010010011 2
b100000000000010010011 b
b100000000000010010011 p
b100 .
b100 u
b100 z
b100 ."
b0 B
b0 m
b0 ~
b0 %"
b0 -"
1!
#10
b1 +
b1 R
b1 `
b1 r
b1 +"
0!
0#
#15
b101 :
b101 {
b101 &"
b101 H
b101 F
b101 *
b101 Q
b101 ^
b101 t
b101 w
b11111111111111111111111111111011 P
b101 I
b101 <
b101 M
b101 s
b101 4
b101 l
b101 q
b1010000000000011 5
b1010000000000011 e
b1010000000000011 j
b11 -
b11 g
b11 '"
bx +
bx R
bx `
bx r
bx +"
b101 (
b101 i
b101 *"
b1000 1
b1000 v
b1000 $"
b10100000000000110010011 2
b10100000000000110010011 b
b10100000000000110010011 p
b1000 .
b1000 u
b1000 z
b1000 ."
b100 B
b100 m
b100 ~
b100 %"
b100 -"
1!
#20
0!
#25
b0 H
b0 F
b0 *
b0 Q
b0 ^
b0 t
b0 w
b0 O
b0 P
b0 I
b0 <
b0 M
b0 s
b0 4
b0 l
b0 q
bx '
bx ]
bx y
b10 9
b10 [
b10 _
18
b1 3
b1 \
b1 k
0&
b10000001000000 5
b10000001000000 e
b10000001000000 j
b0 -
b0 g
b0 '"
b1 +
b1 R
b1 `
b1 r
b1 +"
b1 (
b1 i
b1 *"
b10 7
b10 W
b10 c
b100011 /
b100011 U
b100011 f
b1100 1
b1100 v
b1100 $"
b100000010000000100011 2
b100000010000000100011 b
b100000010000000100011 p
b1100 .
b1100 u
b1100 z
b1100 ."
b1000 B
b1000 m
b1000 ~
b1000 %"
b1000 -"
1!
#30
0!
#35
b1 :
b1 {
b1 &"
b1 ;
b1 a
b1 x
b1 '
b1 ]
b1 y
08
b0 3
b0 \
b0 k
1&
b1000100 5
b1000100 e
b1000100 j
b100 -
b100 g
b100 '"
b0 +
b0 R
b0 `
b0 r
b0 +"
b0 (
b0 i
b0 *"
b11 /
b11 U
b11 f
b10000 1
b10000 v
b10000 $"
b10001000000011 2
b10001000000011 b
b10001000000011 p
b10000 .
b10000 u
b10000 z
b10000 ."
b1100 B
b1100 m
b1100 ~
b1100 %"
b1100 -"
1!
#40
0!
#45
bx '
bx ]
bx y
18
b1 3
b1 \
b1 k
0&
b110000001000000 5
b110000001000000 e
b110000001000000 j
b0 -
b0 g
b0 '"
b101 +
b101 R
b101 `
b101 r
b101 +"
b11 (
b11 i
b11 *"
b100011 /
b100011 U
b100011 f
b10100 1
b10100 v
b10100 $"
b1100000010000000100011 2
b1100000010000000100011 b
b1100000010000000100011 p
b10100 .
b10100 u
b10100 z
b10100 ."
b10000 B
b10000 m
b10000 ~
b10000 %"
b10000 -"
1!
#50
0!
#55
b101 :
b101 {
b101 &"
b101 ;
b101 a
b101 x
b1 '
b1 ]
b1 y
08
b0 3
b0 \
b0 k
1&
b1000101 5
b1000101 e
b1000101 j
b101 -
b101 g
b101 '"
b0 +
b0 R
b0 `
b0 r
b0 +"
b0 (
b0 i
b0 *"
b11 /
b11 U
b11 f
b11000 1
b11000 v
b11000 $"
b10001010000011 2
b10001010000011 b
b10001010000011 p
b11000 .
b11000 u
b11000 z
b11000 ."
b10100 B
b10100 m
b10100 ~
b10100 %"
b10100 -"
1!
#60
0!
#65
bx :
bx {
bx &"
bx D
bx ;
bx a
bx x
bx <
bx M
bx s
bx H
bx F
bx *
bx Q
bx ^
bx t
bx w
bx 4
bx l
bx q
bx J
bx K
bx L
b0x O
bx P
bx I
bx >
bx N
bx ""
bx 5
bx e
bx j
bx -
bx g
bx '"
bx +
bx R
bx `
bx r
bx +"
bx (
bx i
bx *"
bx ,
bx S
bx !"
bx )"
bx )
bx h
bx ("
bx 6
bx V
bx d
bx 7
bx W
bx c
bx /
bx U
bx f
b11100 1
b11100 v
b11100 $"
bx 2
bx b
bx p
b11100 .
b11100 u
b11100 z
b11100 ."
b11000 B
b11000 m
b11000 ~
b11000 %"
b11000 -"
1!
#70
0!
#75
b100000 1
b100000 v
b100000 $"
b100000 .
b100000 u
b100000 z
b100000 ."
b11100 B
b11100 m
b11100 ~
b11100 %"
b11100 -"
1!
#80
0!
1$
#85
b100100 1
b100100 v
b100100 $"
b100100 .
b100100 u
b100100 z
b100100 ."
b100000 ,"
b100000 B
b100000 m
b100000 ~
b100000 %"
b100000 -"
1!
#86
