$date
	Fri Sep 01 18:15:46 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 32 ! result [31:0] $end
$var reg 3 " func3 [2:0] $end
$var reg 32 # operand1 [31:0] $end
$var reg 32 $ operand2 [31:0] $end
$var reg 1 % subsra $end
$scope module dut $end
$var wire 32 & and_result [31:0] $end
$var wire 3 ' func3 [2:0] $end
$var wire 32 ( operand1 [31:0] $end
$var wire 32 ) operand2 [31:0] $end
$var wire 32 * or_result [31:0] $end
$var wire 1 % subsra $end
$var wire 32 + xor_result [31:0] $end
$var wire 32 , sum_result [31:0] $end
$var wire 32 - shra_result [31:0] $end
$var wire 32 . shr_result [31:0] $end
$var wire 32 / shl_result [31:0] $end
$var wire 32 0 lt_result [31:0] $end
$var wire 32 1 diff_result [31:0] $end
$var reg 32 2 result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10 2
b10 1
b0 0
b0 /
b0 .
b0 -
b111110 ,
b111110 +
b111110 *
b11110 )
b100000 (
b0 '
b0 &
1%
b11110 $
b100000 #
b0 "
b10 !
$end
#10
b111110 !
b111110 2
0%
#20
b1 &
b111 *
b110 +
b101000 !
b101000 2
b1 "
b1 '
b11 $
b11 )
b1000 ,
b10 1
b0 0
b101000 /
b101 #
b101 (
#30
b0 &
b111110 *
b111110 +
b0 !
b0 2
b10 "
b10 '
b11110 $
b11110 )
b111110 ,
b10 1
b0 /
b0 .
b0 -
b100000 #
b100000 (
#40
b11111111111111111111111111111110 *
b11111111111111111111111111111110 +
b11 "
b11 '
b11111111111111111111111111111110 ,
b11111111111111111111111111000010 1
b11 .
b11 -
b11111111111111111111111111100000 #
b11111111111111111111111111100000 (
#50
b111110 *
b111110 +
b111110 !
b111110 2
b100 "
b100 '
b111110 ,
b10 1
b0 .
b0 -
b100000 #
b100000 (
#60
b11010 *
b11010 +
b110 !
b110 2
1%
b101 "
b101 '
b1100000 /
b110 .
b110 -
b10 $
b10 )
b11010 ,
b10110 1
b0 0
b11000 #
b11000 (
#70
0%
#80
b1 *
b1 +
b1 !
b1 2
b110 "
b110 '
b0 $
b0 )
b1 ,
b1 1
b0 0
b1 /
b1 .
b1 -
b1 #
b1 (
#90
b1 &
b0 +
b1 !
b1 2
b111 "
b111 '
b10 ,
b0 1
b10 /
b0 .
b0 -
b1 $
b1 )
#100
b11111111111111111111111111111111 &
b11111111111111111111111111111111 *
b11111111111111111111111111111110 !
b11111111111111111111111111111110 2
b0 "
b0 '
b11111111111111111111111111111111 $
b11111111111111111111111111111111 )
b11111111111111111111111111111110 ,
b0 1
b0 /
b0 .
b0 -
b11111111111111111111111111111111 #
b11111111111111111111111111111111 (
#110
b1011101001 &
b1011101001 *
b0 !
b0 2
b100 "
b100 '
b1011101001 $
b1011101001 )
b10111010010 ,
b0 1
b0 0
b1011101001 #
b1011101001 (
#120
b1010 &
b11111111111111111111111111111110 *
b11111111111111111111111111110100 +
b10100 !
b10100 2
1%
b0 "
b0 '
b11111111111111111111111111111010 $
b11111111111111111111111111111010 )
b1000 ,
b10100 1
b1 0
b1110 #
b1110 (
#130
b0 &
b10111 *
b10111 +
b0 !
b0 2
b101 "
b101 '
b0 0
b1001000000 /
b101 $
b101 )
b10111 ,
b1101 1
b10010 #
b10010 (
